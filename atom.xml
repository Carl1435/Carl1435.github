<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Carl1435.github.io</id>
    <title>Gridea</title>
    <updated>2020-09-14T04:29:00.269Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Carl1435.github.io"/>
    <link rel="self" href="https://Carl1435.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Carl1435.github.io/images/avatar.png</logo>
    <icon>https://Carl1435.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[CSS]]></title>
        <id>https://Carl1435.github.io/post/css/</id>
        <link href="https://Carl1435.github.io/post/css/">
        </link>
        <updated>2020-09-14T01:13:35.000Z</updated>
        <content type="html"><![CDATA[<p>布局(好像&lt;p&gt;文本只会在空格处才能换行）fr对剩余宽度按比例自适应<br>
multi-column布局：文本自动填满每个列，无法对每个列进行设置样式，<br>
  column-width：控制列的宽度<br>
  column-gap:控制列之间距离（grid-column-gap），用margin来代替也可<br>
  column-rule：控制列之间直线的样式</p>
<p>flex布局：将空间分为几个列，每个列放入各个子元素<br>
  display: flex;<br>
  flex-direction：规定元素如何在flex内布局，（横竖排列和放置顺序）<br>
  flex-wrap：控制是否允许元素换行，不允许的话会等比例缩放</p>
<p>grid布局：可以同时控制行和列对齐<br>
  display: grid;<br>
  grid-template-columns:<br>
  </p>
<p>动画<br>
animation-name：指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列。<br>
animation-duration：播放一个动画要用的时长<br>
animation-timing-function：设置动画的速度样式<br>
animation-delay：动画何时开始，设为负x时会从x秒直接开始播放<br>
animation-iteration-count：动画运行次数，可以是小数，不可以是负数<br>
animation-direction：是否为反向播放<br>
animation-fill-mode：动画开始和结束时的样式，forwards：保留最后一帧，backwards：在<br>
  animation-delay期间也会保持第一帧<br>
animation-play-state：设置动画的暂停和播放。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[canvas和svg]]></title>
        <id>https://Carl1435.github.io/post/canvas-he-svg/</id>
        <link href="https://Carl1435.github.io/post/canvas-he-svg/">
        </link>
        <updated>2020-09-11T11:06:23.000Z</updated>
        <content type="html"><![CDATA[<p>canvas：<br>
之前有用canvas画过折线图，所以还比较熟。<br>
1.在html页面上定义好canvas位置和大小<br>
2.在JavaScript里画图</p>
<p>1 固定格式<br>
canvas=document.getElementById（）<br>
let context = canvas.getContext(&quot;2d&quot;);<br>
2 消除锯齿（就放大画，然后缩小显示）<br>
canvas.style.width=WIDTH;<br>
canvas.style.height=HEIGHT;<br>
canvas.height=HEIGHT<em>4;<br>
canvas.width=WIDTH</em>4;<br>
context.scale(4,4);<br>
3开始画<br>
moveTo<br>
lineTo<br>
用那些给的函数画就可以了</p>
<p>贴一段代码（当初查了好久的百度才写好一个画图的函数，居然不知道用echars，唉）</p>
<pre><code class="language-JavaScript">function drawChart2(mydata)
{
    let canvas = document.getElementById('myCanvas3');
    let data =[];
    let max=0;
    for(let i=4;i&lt;15;i++)
    {
        data[i-4]=mydata[i]
    }
    max=mydata[0];
    let up=mydata[1];
    let down=mydata[2];
    let context = canvas.getContext(&quot;2d&quot;);
    const WIDTH = canvas.width;
    const HEIGHT = canvas.height;
    canvas.style.width=WIDTH;
    canvas.style.height=HEIGHT;
    canvas.height=HEIGHT*4;
    canvas.width=WIDTH*4;
    context.scale(4,4);
    var axisYStart = {// y轴的终点坐标值
        x: 10,
        y: 30
    };
    var origin = {// 原点坐标值(x轴与y轴相交点)
        x: 10,
        y: HEIGHT - 50
    };
    var axisXStart = {// x轴的终点坐标值
        x: WIDTH - 10,
        y: HEIGHT - 50
    };
    let zHeight=(HEIGHT-80)/max;
    let zWidth=10;
    for(let i=0;i&lt;data.length;i++)
    {
        if(i==0)
        {
            context.fillStyle=&quot;green&quot;;
        }
        else if(i==5)
        {
            context.fillStyle=&quot;gray&quot;;
        }
        else if(i==6)
        {
            context.fillStyle=&quot;red&quot;;
        }
        context.fillRect(origin.x*1+i*27,origin.y*1-data[i]*1*zHeight,zWidth*1,data[i]*zHeight*1);
        context.fillText(data[i],origin.x*1+i*27,origin.y*1-data[i]*1*zHeight-5,10);
    }
    let name=[&quot;跌停&quot;,&quot;≤-7&quot;,&quot;-7~-5&quot;,&quot;-5~-3&quot;,&quot;-3~0&quot;,&quot;0&quot;,&quot;0~3&quot;,&quot;3~5&quot;,&quot;5~7&quot;,&quot;≥7&quot;,&quot;涨停&quot;];
    for(let i=0;i&lt;name.length;i++)
    {
        context.fillStyle=&quot;black&quot;;
        context.fillText(name[i],origin.x*1+i*27,origin.y*1+12,10);
    }
    context.fillStyle=&quot;green&quot;
    context.fillRect(5,origin.y*1+20,130,5);
    context.fillText(&quot;下跌&quot;+String(down),5,origin.y*1+45,40);
    context.fillStyle=&quot;gray&quot;;
    context.fillRect(140,origin.y*1+20,20,5);
    context.fillStyle=&quot;red&quot;;
    context.fillRect(165,origin.y*1+20,130,5);
    context.fillText(&quot;上涨&quot;+String(up),250,origin.y*1+45,40);
    context.stroke();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习]]></title>
        <id>https://Carl1435.github.io/post/chang-shi-yi-xia/</id>
        <link href="https://Carl1435.github.io/post/chang-shi-yi-xia/">
        </link>
        <updated>2020-09-08T10:52:23.000Z</updated>
        <content type="html"><![CDATA[<p>  之前虽然有学过html，不过都是边用边学，所以来系统的学一下，顺便养成写博客的习惯，加油！<br>
基础概念：<br>
  html：一种标记语言，就是把一种种网页的组成元素给标记起来方便我们来对其使用。<br>
  xhtml:与html类似，但更加严格，要求标签必须闭合，小写，参数要用引号括起来<br>
  xml：用于传输数据，是对html的补充，要求闭合。<br>
  下面是对标签的整理：<br>
&lt;!--...--&gt; ：注释<br>
&lt;!DOCTYPE&gt;：<!DOCTYPE html>是html5唯一的声明，用于告知浏览器使用的html版本<br>
&lt;a&gt;：超文本链接，属性：href,download,rel(供搜索引擎使用)，target（在哪里打开链接，只用过_blank）,&lt;a herf=&quot;http://www.w3school.com.cn&quot;&gt;baidu</a><br>
&lt;abbr&gt;:给文字一段注释，<abbr title='注释'>例子</abbr><br>
&lt;address&gt;:描述作者，表现为斜体和前后的换行，<address>writer</address><br>
\ <area>：给图像可点击区域设置链接。属性：tref（链接）、alt(报错)、shape(形状)、coords(坐标)<br>
&lt;article&gt;:定义有意义的且必须是独立于文档的其余部分。感觉类似div<br>
&lt;aside&gt;:同上<br>
&lt;audio&gt;:定义声音.标签间放置的文本会在浏览器不支持时显示。属性：autoplay（立即播放），controls（显示控制部件），loop（循环）<br>
<img src="https://Carl1435.github.io/post-images/1599651703934.png" alt="" loading="lazy"><br>
&lt;b&gt;:<b>加粗</b><br>
&lt;base&gt;:默认链接和链接属性<br>
<font color='red'>&lt;bdi&gt;:不懂，设置一段文本，使其脱离其父元素的文本方向设置</font><br>
&lt;bdo&gt;:规定文本方向<br>
&lt;big&gt;:<big>html5不支持</big><br>
&lt;blockquote&gt;:定义摘自另一个源的块引用。没用过，不清楚。两侧缩进。<br>
&lt;body&gt;:定义文档主体。<br>
&lt;br&gt;:换行<br>
&lt;button&gt;:按钮<br>
&lt;canvas&gt;:之后再说<br>
&lt;caption&gt;:表格标题<br>
&lt;center&gt;:<center>html5不支持</center><br>
&lt;cite&gt;:<cite>定义标题</cite><br>
&lt;code&gt;:计算机代码文本<br>
&lt;col&gt;:规定了\ <colgroup> 元素内部的每一列的列属性。<br>
&lt;colgroup&gt; :对列进行组合设计样式<br>
&lt;datalist&gt;:输入框的下拉菜单<br>
&lt;dl&gt; （定义一个描述列表）和 &lt;dt&gt; （定义项目/名字）&lt;dd&gt;(对一个描述列表中的项目/名字进行描述)<br>
&lt;del&gt;:<del>效果</del><br>
&lt;detail&gt;:只有 Chrome 和 Safari 6 支持 。补充细节，就是一个下拉框。<br>
&lt;dfn&gt;:定义项目<br>
&lt;dialog&gt;:定义一个对话框、确认框或窗口。ie不支持<br>
&lt;dir&gt;:html5不支持,定义目录列表<br>
&lt;div&gt;:划分区域，组合块级元素，html5不支持align属性<br>
&lt;em&gt;:<em>强调</em><br>
&lt;embed&gt;:嵌入外部应用或者互动程序,建议用 &lt;img&gt;、&lt;iframe&gt;、&lt;video&gt;、&lt;audio&gt; 等标签代替<br>
&lt;fieldset&gt;:对表单分组，会画一个边框<br>
&lt;figcaption&gt;:为&lt;figure&gt;定义标题，放在&lt;figure&gt;的第一个或者最后一个元素<br>
&lt;font&gt;:设置字体。html5不支持<br>
&lt;form&gt;:表单。属性：action(向何处发送)<br>
&lt;frame&gt;:定义 &lt;frameset&gt; 中的子窗口（框架）。html5不支持<br>
&lt;frameset&gt;:定义一个框架集。html5不支持<br>
&lt;head&gt;:必须包含文档的标题（title），可以包含脚本、样式、meta 信息 以及其他更多的信息。<br>
&lt;header&gt;:介绍内容或者导航链接栏的容器,类似div<br>
&lt;hgroup&gt;:对标题元素分组<br>
&lt;hr&gt;:一条线<br>
&lt;i&gt;:斜体<br>
&lt;iframe&gt;:一个内联框架,属性：src（显示文档的URL）<br>
&lt;img&gt;:照片。属性（必须）：alt（替代文本），src<br>
&lt;input&gt;:输入框<br>
&lt;ins&gt;:表示新插入文本，表现为下划线<br>
<font color='red'>&lt;keygen&gt;：用于表单的密钥对生成器字段，不懂</font><br>
&lt;label&gt;:把文字和input框绑定，便于鼠标操作<br>
&lt;legend&gt;:为&lt;fieldset&gt;定义一个标题<br>
&lt;li&gt;:列表项目<br>
&lt;link&gt;:链接到外部样式文件,放在head里<br>
&lt;map&gt;:带有可点击区域的图像映射,与&lt;area&gt;一起用，属性：name与img中的usemap关联<br>
&lt;mark&gt;：突出显示文本<br>
&lt;menu&gt;:<br>
&lt;meta&gt;:常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据<br>
&lt;meter&gt;:定义度量衡。仅用于已知最大和最小值的度量。<br>
&lt;nav&gt;:定义导航栏链接部分，<br>
&lt;noframes&gt;:html5不支持，不支持frames时显示的文本<br>
&lt;object&gt;:向页面添加多媒体，属性：data（url）<br>
&lt;ol&gt;:有序列表<br>
&lt;optgroup&gt;:把相关的选项组合在一起,用于选择器<br>
&lt;option&gt;:选择器，和select一起用<br>
&lt;output&gt;:作为计算结果输出显示<br>
&lt;p&gt;:段落<br>
&lt;param&gt;:为包含它的 &lt;object&gt; 或者 &lt;applet&gt; 标签提供参数。<br>
&lt;pre&gt;:可定义预格式化的文本。没用过<br>
&lt;html&gt;:<br>
&lt;picture&gt;:们在不同的设备上显示不同的图片,如果没有匹配的，就选择 &lt;img&gt; 元素的 src 属性中的 url<br>
&lt;progress&gt;:进度条<br>
&lt;q&gt;:引号<br>
&lt;rp&gt;、 &lt;ruby&gt; 和 &lt;rt&gt;:用于表示拼音<br>
&lt;s&gt;:定义不正确的文本，也是划掉的效果<br>
&lt;samp&gt;:<br>
&lt; script &gt;:放JavaScript代码<br>
&lt;section&gt;:定义了文档的某个区域<br>
&lt;select&gt;:选择器<br>
&lt;small&gt;:较小的文本<br>
&lt;source&gt;:放在&lt;audio&gt;中，浏览器选择它所支持的源文件<br>
&lt;span&gt;:用来给文本设置样式<br>
&lt;strike&gt;:删除线，html5不支持<br>
&lt;strong&gt;:加粗<br>
&lt; style &gt;:css样式<br>
&lt;sub&gt;:下标<br>
&lt;summary&gt;:和 detail一起使用，<br>
&lt;sup&gt;:上标<br>
&lt;table&gt; &lt;tbody&gt;&lt;th&gt; &lt;tr&gt; &lt;td&gt;:表格<br>
&lt;textarea&gt;:文本框<br>
&lt;tfoot&gt;:表尾<br>
&lt;thead&gt;：表头<br>
&lt;time&gt;:放时间<br>
&lt;title&gt;:定义文档标题<br>
&lt;track&gt;:为媒体元素（比如 &lt;audio&gt; and &lt;video&gt;）规定外部文本轨道。<br>
&lt;u&gt;:下划线<br>
&lt;ul&gt;:html无序列表<br>
&lt;var&gt;:变量<br>
&lt;video&gt;:视频<br>
&lt;wbr&gt;:规定在文本中的何处适合添加换行符。</p>
<p>标签语义化：很多标签功能相同，还有一些标签没有明显功能，他们的功能就是带上语义，便于搜索引擎优化，团队开发</p>
<p>块级元素的特点:<br>
1.总是从新的一行开始<br>
2.高度、宽度都是可控的<br>
3.宽度没有设置时，默认为100%<br>
4.块级元素中可以包含块级元素和行内元素</p>
<p>行内元素的特点:<br>
1.和其他元素在一行中；<br>
2.高度、宽度以及内边距都是不可控的<br>
3.宽高就是内容的高度，不可以改变<br>
4.行内元素只能行内元素，不能包含块级元素<br>
借鉴于:https://www.cnblogs.com/yxm440/p/7667539.html</p>
<p>行-&gt;块:display:block 、设置float、使用position:absolute，与position:fixed<br>
块-&gt;行：display：inline<br>
inline-block?</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Carl1435.github.io/post/hello-gridea/</id>
        <link href="https://Carl1435.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>